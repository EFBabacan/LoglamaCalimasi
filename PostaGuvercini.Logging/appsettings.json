{
  "Serilog": {
    // 1. Dinamik Seviye Kontrolü (Aynı kalıyor)
    "LevelSwitches": { "$controlSwitch": "Information" },
    "MinimumLevel": {
      "ControlledBy": "$controlSwitch"
    },

    // 2. Kütüphane Bilgilendirmesi (En Önemli Kısım)
    // Serilog'a, standart olmayan sink'lerimizi (bizim yazdığımız BatchedFileSink gibi)
    // hangi kütüphanelerde bulacağını söylüyoruz.
    "Using": [
      "PostaGuvercini.Logging", // Bizim custom BatchedFileSink'imiz burada
      "Serilog.Sinks.File" // Standart File sink'i için
    ],

    // 3. Zenginleştiriciler (Aynı kalıyor, C# kodundan gelecek)
    // "Enrich": ["FromLogContext", "WithMachineName", ...],

    // 4. Hedefler ve Kural Bazlı Yönlendirme (Tüm C# mantığı buraya taşındı)
    "WriteTo": [
      // Kural 0: Konsol (Her zaman açık)
      {
        "Name": "Console"
      },

      // Kural 1: Acil Durum Logları
      {
        "Name": "Logger", // Bu bir alt-logger'dır
        "Args": {
          "configureLogger": {
            // Filtre: Salı günü C#'ta yazdığımız Expression'ın aynısı
            "Filter": [
              {
                "Name": "ByIncludingOnly",
                "Args": {
                  "expression": "Contains(RenderedMessage, 'Ödeme Başarısız') or EventType = 'PaymentFailure'"
                }
              }
            ],
            "WriteTo": [
              {
                // Hedef: Bizim özel BatchedFileSink'imiz
                "Name": "BatchedFileSink",
                "Args": {
                  "filePath": "logs/Acil_Hatalar_JSON.txt", // JSON'dan geldiğini belli edelim
                  "options": {
                    "batchSizeLimit": 10,
                    "period": "0.00:00:02" // 2 saniye
                  }
                }
              }
            ]
          }
        }
      },

      // Kural 2: Microsoft Logları
      {
        "Name": "Logger",
        "Args": {
          "configureLogger": {
            "Filter": [
              {
                "Name": "ByIncludingOnly",
                "Args": {
                  // Pazartesi günü C#'ta yazdığımız filtrenin Expression karşılığı
                  "expression": "StartsWith(SourceContext, 'Microsoft.')"
                }
              }
            ],
            // Seviye Override
            "MinimumLevel": "Warning",
            "WriteTo": [
              {
                // Hedef: Standart File sink (Toplu değil, basit dosya)
                "Name": "File",
                "Args": {
                  "path": "logs/microsoft-logs-JSON.txt",
                  "rollingInterval": "Day"
                }
              }
            ]
          }
        }
      },

      // Kural 3: Bizim Uygulama Logları (Seq)
      {
        "Name": "Logger",
        "Args": {
          "configureLogger": {
            "Filter": [
              {
                "Name": "ByExcluding", // Acil logları hariç tut
                "Args": {
                  "expression": "Contains(RenderedMessage, 'Ödeme Başarısız') or EventType = 'PaymentFailure'"
                }
              },
              {
                "Name": "ByIncludingOnly", // Bizim uygulamaları dahil et
                "Args": {
                  "expression": "StartsWith(SourceContext, 'Logging.WebApiTest') or StartsWith(SourceContext, 'Logging.WebAppTest') or StartsWith(SourceContext, 'PostaGuvercini.Logging')"
                }
              }
            ],
            "MinimumLevel": "Information",
            "WriteTo": [
              {
                // Hedef: Seq
                "Name": "Seq",
                "Args": {
                  "serverUrl": "http://localhost:5341"
                }
              }
            ]
          }
        }
      }
    ]
  }
}